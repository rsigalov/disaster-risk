F10 = λya - 1 - (1-aalpha) * λla
# c(F1 = F1, F2 = F2, F3 = F3, F4 = F4, F5 = F5, F6 = F6, F7 = F7, F8 = F8, F9 = F9, F10 = F10)
c(F3 = F3, F4 = F4, F5 = F5, F6 = F6, F7 = F7, F8 = F8, F9 = F9, F10 = F10)
}
ss <- multiroot(f = model, start = c(-1,1,1,1,1,1,1,1))$root
λkk <- (-ss[1])/(ss[4]-ss[1])
λka <- (λca + (λra - λca)*rrhoA)/(-λrk+λck)
ss <- multiroot(f = model, start = c(-1,1,1,1,1,1,1,1))$root
λkk <- (-ss[1])/(ss[4]-ss[1])
λka <- (ss[5] + (ss[8] - ss[5])*rrhoA)/(-ss[4]+ss[1])
ss
λka
λkk
vTFP <- rep(0.01, 100)
vCapital <- rep(0, 100)
for (i in seq(2, 100, 1)) {
vTFP[i] <- vTFP[i - 1] * rrhoA
vCapital[i] <- vCapital[i - 1] * λkk + vTFP[i - 1] * ss[9]
}
vOutput <- rep(0, 100)
for (i in seq(1, 100, 1)) {
vOutput[i] <- vOutput[i] * ss[3] + vTFP[i] * ss[7]
}
plot(vOutput)
plot(vOutput)
theta = rep(0,100,1)
theta
theta(1)
theta[1]
theta[2]
theta = rep(0, 100)
theta[2]
theta
rbinom(n = 100, prob = pi)
rbinom(size = 100, prob = pi, n = 2)
rbinom(size = 100, prob = pi, n = 1)
rbinom(size = 100, prob = pi, n = 100)
rbinom(100,1,pi)
v = 1;
pi = 0.1;
rbinom(100,1,pi)
for (itrade in seq(1,length(isInformed))) {
print(itrade)
}
isInformed <- rbinom(100,1,pi)
for (itrade in seq(1,length(isInformed))) {
print(itrade)
}
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
rbinom(1,1,0.5)
nSimulations <- 10
nTrades <- 100
mTheta <- matrix(0, nTrades, nSimulations)
theta[1,]
theta[1,:]
mTheta[1,:]
mTheta[1,]
rbinom(100, 1, pi)
rbinom(100, 2, pi)
rbinom(100, 10, pi)
rbinom(100, 1, pi)
pi = 0.5;
nSimulations <- 10
nTrades <- 100
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
for (iTrade in seq(2,length(isInformed))) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if rbinom(1,1,0.5) == 1 {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
pi = 0.5;
nSimulations <- 10
nTrades <- 100
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,length(isInformed))) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if rbinom(1,1,0.5) == 1 {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,length(isInformed))) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
mTheta
plot(mTheta)
pi = 0.25;
nSimulations <- 10
nTrades <- 100
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,length(isInformed))) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
mTheta
dfTheta <- data.frame(mTheta)
dfTheta
library("reshape")
library("ggplot2")
dfTheta$trade <- seq(1, nTrades, 1)
dfTheta <- melt(dfTheta, id.vars = "trade")
dfTheta
ggplot(dfTheta, aes(x = trade, y = value, color = variable)) +
geom_line()
ggplot(dfTheta, aes(x = trade, y = value, color = variable)) +
geom_line() + geom_point()
nSimulations <- 500
nTrades <- 200
dfTheta <- data.frame(pi = c(NA), trade = c(NA), meanTheta = c(NA), sdTheta(NA))
dfTheta <- data.frame(pi = c(NA), trade = c(NA), meanTheta = c(NA), sdTheta = c(NA))
dfTheta
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,length(isInformed))) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
dfThetaTmp <- data.frame(mTheta)
dfThetaTmp$trade <- seq(1, nTrades, 1)
dfThetaTmp <- melt(dfThetaTmp, id.vars = "trade")
dfThetaTmp
rowMeans(mTheta)
thetaMeans <- rowMeans(mTheta)
apply(mTheta, 1, sd)
apply(mTheta, 2, sd)
apply(mTheta, 1, sd)
nSimulations <- 500
nTrades <- 200
dfTheta <- data.frame(pi = c(NA), trade = c(NA), meanTheta = c(NA), sdTheta = c(NA))
# Now Simulating many many and comparing for different pi
for (pi in c(0.05, 0.15, 0.25, 0.5)) {
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,nTrades)) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
thetaMeans <- rowMeans(mTheta)
dfThetaTmp <- data.frame(pi = rep(pi, nTrades),
trade = seq(1,nTrades, 1),
meanTheta = apply(mTheta, 1, mean),
sdTheta = apply(mTheta, 1, sd))
dfTheta <- rbind(dfTheta, dfThetaTmp)
}
nSimulations <- 500
nTrades <- 200
dfTheta <- data.frame(pi = c(NA), trade = c(NA), meanTheta = c(NA), sdTheta = c(NA))
# Now Simulating many many and comparing for different pi
for (pi in c(0.05, 0.15, 0.25, 0.5)) {
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(nTrades, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,nTrades)) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
thetaMeans <- rowMeans(mTheta)
dfThetaTmp <- data.frame(pi = rep(pi, nTrades),
trade = seq(1,nTrades, 1),
meanTheta = apply(mTheta, 1, mean),
sdTheta = apply(mTheta, 1, sd))
dfTheta <- rbind(dfTheta, dfThetaTmp)
}
dfTheta
dfTheta
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
lower = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
upper = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
color = pi)) +
geom_line()
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
lower = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
upper = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
color = factor(pi))) +
geom_line()
dfTheta <-
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
lower = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
upper = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
color = factor(pi))) +
geom_line() + geom_ribbon()
dim(tdTheta)
dim(dfTheta)
dims(dfTheta)
dim(dfTheta)
dfTheta
nSimulations <- 1000
nTrades <- 200
dfTheta <- data.frame(pi = c(NA), trade = c(NA), meanTheta = c(NA), sdTheta = c(NA))
# Now Simulating many many and comparing for different pi
for (pi in c(0.05, 0.15, 0.25, 0.5)) {
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(nTrades, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,nTrades)) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
thetaMeans <- rowMeans(mTheta)
dfThetaTmp <- data.frame(pi = rep(pi, nTrades),
trade = seq(1,nTrades, 1),
meanTheta = apply(mTheta, 1, mean),
sdTheta = apply(mTheta, 1, sd))
dfTheta <- rbind(dfTheta, dfThetaTmp)
}
dfTheta <- dfTheta[2:dim(tdTheta)[1],]
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
ymin = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
ymax = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
color = factor(pi))) +
geom_line() + geom_ribbon()
dfTheta <- dfTheta[2:dim(dfTheta)[1],]
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
ymin = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
ymax = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
color = factor(pi))) +
geom_line() + geom_ribbon()
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
ymin = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
ymax = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
color = factor(pi))) +
geom_line() + geom_ribbon(alpha=0.3)
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
ymin = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
ymax = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
fill = factor(pi))) +
geom_line() + geom_ribbon(alpha=0.3)
ggplot(dfTheta, aes(x = trade,
y = meanTheta,
ymin = meanTheta - 1.96 * sdTheta/sqrt(nSimulations),
ymax = meanTheta + 1.96 * sdTheta/sqrt(nSimulations),
fill = factor(pi), color = factor(pi))) +
geom_line() + geom_ribbon(alpha=0.3)
pi = 0.25;
nSimulations <- 10
nTrades <- 100
mTheta <- matrix(0, nTrades, nSimulations)
mTheta[1,] <- rep(0.5, nSimulations)
for (iSimulation in seq(1, nSimulations)) {
isInformed <- rbinom(100, 1, pi)
vTradeDirection <- rep(0, nTrades)
for (iTrade in seq(2,length(isInformed))) {
# Generating random trades:
if (isInformed[iTrade] == 1) {
vTradeDirection[iTrade] <- 1
} else if (rbinom(1,1,0.5) == 1) {
vTradeDirection[iTrade] <- 1
} else {
vTradeDirection[iTrade] <- -1
}
# Updating thetas:
oldTheta <- mTheta[iTrade - 1, iSimulation]
if (vTradeDirection[iTrade] == 1) {
mTheta[iTrade, iSimulation] <- (1 + pi)*0.5*oldTheta/(pi*oldTheta + (1-pi)*0.5)
} else {
mTheta[iTrade, iSimulation] <- (1 - pi)*0.5*oldTheta/(pi*(1-oldTheta) + (1-pi)*0.5)
}
}
}
dfTheta <- data.frame(mTheta)
dfTheta$trade <- seq(1, nTrades, 1)
dfTheta <- melt(dfTheta, id.vars = "trade")
ggplot(dfTheta, aes(x = trade, y = value, color = variable)) +
geom_line() + geom_point()
1+1
install.packages("nloptr")
library("nloptr")
# 5. Comparing aggregate measures, doint the term structure
df <- data.table(read.csv("estimated_data/disaster-risk-series/combined_disaster_df.csv"))
library("ggplot2")
library("data.table")
library("dplyr")
setwd("~/Documents/PhD/disaster-risk-revision/")
# 5. Comparing aggregate measures, doint the term structure
df <- as_tibble(read.csv("estimated_data/disaster-risk-series/combined_disaster_df.csv"))
library("ggplot2")
library("data.table")
library("dplyr")
setwd("~/Documents/PhD/disaster-risk-revision/")
# 5. Comparing aggregate measures, doint the term structure
df <- as_tibble(read.csv("estimated_data/disaster-risk-series/combined_disaster_df.csv"))
# 5. Comparing aggregate measures, doint the term structure
df <- as_tibble(read.csv("estimated_data/disaster-risk-series/combined_disaster_df.csv"))
setwd("~/Documents/PhD/disaster-risk-revision/")
# 5. Comparing aggregate measures, doint the term structure
df <- as_tibble(read.csv("estimated_data/disaster-risk-series/combined_disaster_df.csv"))
# 5. Comparing aggregate measures, doint the term structure
df <- as_tibble(read.csv("estimated_data/disaster-risk-series/combined_disaster_df.csv"))
df_to_plot <- df %>%
filter(level == "sp_500") %>%
filter(var %in% c("D_clamp", "rn_prob_sigma", "rn_prob_2sigma", "rn_prob_5", "rn_prob_20")) %>%
filter(days %in% c(40, 100, 180)) %>%
group_by(var, days) %>%
mutate(std = sd(value, na.rm = T)) %>%
mutate(value_norm = value/std)
df_to_plot <- df %>%
filter(level %in% c("sp_500_CME", "sp_500_OM")) %>%
filter(variables == "D_clamp") %>%
filter(days %in% c(40, 100))
ggplot(df_to_plot, aes(x = date, y = value, color = factor(days))) +
geom_line(alpha = 0.8) +
facet_wrap(~level, scales = "free")
df_to_plot
df %>%
filter(level %in% c("sp_500_CME", "sp_500_OM"))
df_to_plot <- df %>%
filter(level %in% c("sp_500_CME", "sp_500_OM")) %>%
filter(var == "D_clamp") %>%
filter(days %in% c(40, 100))
ggplot(df_to_plot, aes(x = date, y = value, color = factor(days))) +
geom_line(alpha = 0.8) +
facet_wrap(~level, scales = "free")
df$date <- as.Date(df$date, format = "%Y-%m-%d")
df_to_plot <- df %>%
filter(level %in% c("sp_500_CME", "sp_500_OM")) %>%
filter(var == "D_clamp") %>%
filter(days %in% c(40, 100))
ggplot(df_to_plot, aes(x = date, y = value, color = factor(days))) +
geom_line(alpha = 0.8) +
facet_wrap(~level, scales = "free")
library("reshape")
cast(df_to_plot, date ~ level + days)
corr(cast(df_to_plot, date ~ level + days))
cor(cast(df_to_plot, date ~ level + days))
cor(cast(df_to_plot, date ~ level + days), na.rm = T)
cor(cast(df_to_plot, date ~ level + days), na.rm = TRUE)
cor(cast(df_to_plot, date ~ level + days), use = "complete.obs")
diff(df_to_plot)
diff(df_to_plot)
diff(df_to_plot %>% select(sp_500_CME_40, sp_500_CME_100))
diff(cast(df_to_plot, date ~ level + days) %>% select(sp_500_CME_40, sp_500_CME_100))
cast(df_to_plot, date ~ level + days) %>% select(sp_500_CME_40, sp_500_CME_100)
diff(cast(df_to_plot, date ~ level + days)$sp_500_CME_40)
df_to_plot <- df %>%
filter(level %in% c("sp_500_OM", "ind")) %>%
filter(var == "D_clamp") %>%
filter(days %in% c(40, 100))
ggplot(df_to_plot, aes(x = date, y = value, color = factor(days))) +
geom_line(alpha = 0.8) +
facet_wrap(~level, scales = "free")
df %>%
filter(level %in% c("sp_500_OM", "ind")) %>%
filter(var == "D_clamp")
unique(df %>%
filter(level %in% c("sp_500_OM", "ind")) %>%
filter(var == "D_clamp")$days)
df_to_plot <- df %>%
filter(level %in% c("sp_500_OM", "ind")) %>%
filter(var == "D_clamp")
df
df$days
unique(df_to_plot$days)
df_to_plot <- df %>%
filter(level %in% c("sp_500_OM", "ind")) %>%
filter(var == "D_clamp") %>%
filter(days %in% c(40, 30))
df_to_plot <- df %>%
filter(((level == "ind") & (days == 30)) | ((level == "sp_500_OM") & (days == 40))) %>%
filter(var == "D_clamp")
df_to_plot <- df %>%
filter(((level == "ind") & (days == 30)) | ((level == "sp_500_OM") & (days == 40))) %>%
filter(var == "D_clamp")
ggplot(df_to_plot, aes(x = date, y = value, color = factor(level))) +
geom_line(alpha = 0.8)
df_to_plot <- df %>%
filter(((level == "ind") & (days == 120)) | ((level == "sp_500_OM") & (days == 100))) %>%
filter(var == "D_clamp")
ggplot(df_to_plot, aes(x = date, y = value, color = factor(level))) +
geom_line(alpha = 0.8)
